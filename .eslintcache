[{"C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\index.js":"1","C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\App.js":"2","C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\reportWebVitals.js":"3","C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\UI\\dashboard\\PostsCollection.js":"4","C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\UI\\SelectedPost\\SelectedPost.js":"5","C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\UI\\dashboard\\Header.js":"6","C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\UI\\elements\\options\\Options.js":"7","C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\UI\\elements\\spinner\\Spinner.js":"8","C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\UI\\elements\\footerPagination\\FooterPagination.js":"9","C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\UI\\elements\\alert\\Alert.js":"10"},{"size":506,"mtime":1610735267956,"results":"11","hashOfConfig":"12"},{"size":1451,"mtime":1611970528931,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":5026,"mtime":1611014760797,"results":"15","hashOfConfig":"12"},{"size":1368,"mtime":1611007798942,"results":"16","hashOfConfig":"12"},{"size":1982,"mtime":1611970847161,"results":"17","hashOfConfig":"12"},{"size":564,"mtime":1611077372255,"results":"18","hashOfConfig":"12"},{"size":783,"mtime":1611007093765,"results":"19","hashOfConfig":"12"},{"size":881,"mtime":1611007989139,"results":"20","hashOfConfig":"12"},{"size":382,"mtime":1611007813102,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"qfjmyl",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\index.js",[],["46","47"],"C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\App.js",[],"C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\reportWebVitals.js",[],"C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\UI\\dashboard\\PostsCollection.js",["48"],"import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport noImage from '../../images/noimage.jpg';\r\nimport {ReactComponent as RedditLogo} from '../../icons/reddit-logo.svg';\r\nimport SelectedPost from '../SelectedPost/SelectedPost';\r\nimport { disableBodyScroll, enableBodyScroll } from 'body-scroll-lock';\r\nimport FooterPagination from '../elements/footerPagination/FooterPagination';\r\nimport Spinner from '../elements/spinner/Spinner';\r\nimport Alert from '../elements/alert/Alert';\r\n\r\n\r\nconst PostsCollection = props => {\r\n\r\n    const [posts, setPosts] = useState([]);\r\n    const [marginPost, setMarginPost] = useState({});\r\n    const [selected, setSelected] = useState(false);\r\n    const [index, setIndex] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n    const [alert, setAlert] = useState(false);\r\n\r\n\r\n    //whenever new subreddit is selected, post are fetched\r\n    useEffect(() => {\r\n        if(props.subreddit){\r\n          request(true)\r\n        }\r\n      }, [props.subreddit]);\r\n\r\n\r\n      //function that fetches pst from reddit api\r\n      function request (newSubreddit, apiDetails='', direction) {\r\n        setPosts([]);\r\n        setLoading(true);\r\n        axios.get(`https://www.reddit.com/${props.subreddit}.json?limit=10${apiDetails}`)\r\n        .then(function (response) {\r\n        let posts = response.data.data.children.filter(post => {\r\n          return !post.data.stickied\r\n        });\r\n\r\n        setPosts(posts);\r\n        setAlert(false);\r\n        if (newSubreddit){\r\n          setIndex(0)\r\n        }\r\n        //setting the selected subreddit in local storage\r\n        localStorage.setItem(\"subreddit\", props.subreddit)\r\n        let firstChildren = posts[0]\r\n        let lastChildren = posts[posts.length -1]\r\n        setMarginPost({first: firstChildren.kind + \"_\" + firstChildren.data.id ,last: lastChildren.kind + \"_\" + lastChildren.data.id});\r\n        //pagination: incrementing or decrmenting value\r\n        if(direction===\"newer\"){\r\n          setIndex(index-1)\r\n        } else if(direction===\"older\") {\r\n          setIndex(index+1)\r\n        }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n          setAlert(true);\r\n          setPosts([])\r\n        })\r\n        .then(function () {\r\n          setLoading(false)\r\n        });  \r\n      }\r\n\r\n      //displaying full post\r\n      function display (title, link, src, subreddit, author) {\r\n          setSelected({title, link, src, subreddit, author})\r\n          disableBodyScroll(document.querySelector('body'))\r\n      }\r\n\r\n      //closing full post\r\n      function close (e){\r\n        if([\"selectedPost\", \"selectedPost__close\", \"selectedPost__path\"].includes(e.target.id) ){\r\n            setSelected(false)\r\n            enableBodyScroll(document.querySelector('body'))\r\n        }\r\n      }\r\n\r\n      //fetching subsequent post\r\n      function next (){\r\n        request(false, '&after='+ marginPost.last, \"older\");\r\n      }\r\n\r\n      //fetching previous post\r\n      function previous (){\r\n        request(false, '&before='+ marginPost.first, \"newer\");\r\n    }\r\n  \r\n  return (\r\n    <React.Fragment>\r\n        <div className=\"app__box\">\r\n            {posts.map(post => {\r\n                let src = null;\r\n                if(post.data.thumbnail.match(/.*\\.jpg/g)){\r\n                src=post.data.thumbnail\r\n                } else {\r\n                    src=noImage\r\n                }\r\n                let title = post.data.title.length > 40 ? post.data.title.substring(0, 40) + \"...\" : post.data.title\r\n\r\n                return( \r\n                <div key={post.data.id} className=\"post\" onClick={() => display(post.data.title, post.data.permalink, src, post.data.subreddit, post.data.author)}>\r\n                    <div className=\"post__header\">\r\n                        <h2 className=\"post__title\">{title}</h2>\r\n                        <a target=\"blank\" href={\"https://www.reddit.com\" + post.data.permalink}><RedditLogo className=\"post__icon\"/></a>\r\n                    </div>\r\n                    <div><img className=\"post__image\" src={src} alt=\"\"/></div>\r\n                    <div className=\"post__footer\">\r\n                        <p className=\"post__blog\">subreddit: {post.data.subreddit}</p>\r\n                        <p className=\"post__author\">author: {post.data.author}</p>\r\n                    </div>\r\n                </div>\r\n                )\r\n            })\r\n\r\n            }\r\n            <Spinner loading={loading} />\r\n            <SelectedPost \r\n              title={selected.title} \r\n              link={selected.link} \r\n              src={selected.src} \r\n              subreddit={selected.subreddit} \r\n              author={selected.author} \r\n              close={(e) => close(e)}\r\n              selected={selected}\r\n              />\r\n              <Alert show={alert} text=\"POSTS NOT FOUND\" />\r\n        </div>\r\n        <FooterPagination next={next} previous={previous} index={index} posts={posts.length}/>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PostsCollection;\r\n","C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\UI\\SelectedPost\\SelectedPost.js",[],"C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\UI\\dashboard\\Header.js",[],"C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\UI\\elements\\options\\Options.js",["49"],"import React from 'react';\r\n\r\nconst Options = props => {\r\n\r\n\r\n\r\n    if(props.show && props.options.length > 0){\r\n    return (\r\n        <div className=\"form__optionContainer\">\r\n        {\r\n            props.options.map(option => {\r\n                if(option.data.title){\r\n                    return (<div className=\"form__option\" key={option.data.id} id={option.data.url} onClick={props.fetch}>{option.data.title}</div>)\r\n                }\r\n            })\r\n        }\r\n        </div>\r\n        );\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default Options;","C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\UI\\elements\\spinner\\Spinner.js",[],"C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\UI\\elements\\footerPagination\\FooterPagination.js",[],"C:\\Users\\kuban\\OneDrive\\Pulpit\\reddit\\reddit-app\\src\\UI\\elements\\alert\\Alert.js",[],["50","51"],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":27,"column":10,"nodeType":"58","endLine":27,"endColumn":27,"suggestions":"59"},{"ruleId":"60","severity":1,"message":"61","line":11,"column":38,"nodeType":"62","messageId":"63","endLine":11,"endColumn":40},{"ruleId":"52","replacedBy":"64"},{"ruleId":"54","replacedBy":"65"},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'request'. Either include it or remove the dependency array.","ArrayExpression",["68"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["66"],["67"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [props.subreddit, request]",{"range":"71","text":"72"},[1013,1030],"[props.subreddit, request]"]